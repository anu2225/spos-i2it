class MemoryBlock:
    def __init__(self, size, allocated=False, process_id=None):
        self.size = size
        self.allocated = allocated
        self.process_id = process_id


class MemoryManager:
    def __init__(self, memory_size):
        self.memory_size = memory_size
        self.memory = [MemoryBlock(memory_size)]
        self.last_allocated_index = -1

    def next_fit(self, process_id, process_size):
        for i in range(self.last_allocated_index + 1, len(self.memory)):
            block = self.memory[i]

            if not block.allocated and block.size >= process_size:
                self.allocate_memory(i, process_id, process_size)
                self.last_allocated_index = i
                return

        # If no suitable block is found from the last allocated index, start from the beginning
        for i in range(len(self.memory)):
            block = self.memory[i]

            if not block.allocated and block.size >= process_size:
                self.allocate_memory(i, process_id, process_size)
                self.last_allocated_index = i
                return

        print(f"Not enough memory to allocate Process {process_id} (Size: {process_size}).")

    def allocate_memory(self, block_index, process_id, process_size):
        block = self.memory[block_index]

        if block.size == process_size:
            block.allocated = True
            block.process_id = process_id
        else:
            new_block = MemoryBlock(block.size - process_size)
            self.memory.insert(block_index + 1, new_block)
            block.size = process_size
            block.allocated = True
            block.process_id = process_id

    def display_memory_status(self):
        print("\nMemory Status:")
        for i, block in enumerate(self.memory):
            status = "Allocated" if block.allocated else "Free"
            print(f"Block {i + 1}: Size: {block.size}, Status: {status}, Process ID: {block.process_id}")


def main():
    memory_size = int(input("Enter the total size of memory: "))
    memory_manager = MemoryManager(memory_size)

    while True:
        print("\nMemory Placement Strategy - Next Fit:")
        print("1. Allocate Process")
        print("2. Display Memory Status")
        print("3. Exit")

        choice = int(input("Enter your choice: "))

        if choice == 1:
            process_id = input("Enter Process ID: ")
            process_size = int(input("Enter Process Size: "))
            memory_manager.next_fit(process_id, process_size)
        elif choice == 2:
            memory_manager.display_memory_status()
        elif choice == 3:
            break
        else:
            print("Invalid choice. Please enter a valid option.")


if __name__ == "__main__":
    main()